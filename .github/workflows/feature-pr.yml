# 功能分支推送時自動創建 PR 並執行 CI 檢查
name: Feature Branch PR & CI

on:
  push:
    branches:
      - 'feature/**'
      - 'fix/**'
      - 'hotfix/**'
      - 'refactor/**'
      - 'chore/**'

permissions:
  contents: write
  pull-requests: write
  checks: write

jobs:
  setup-pr:
    name: 設置 Pull Request
    runs-on: ubuntu-latest
    outputs:
      pr-number: ${{ steps.get-pr.outputs.pr_number }}
      pr-exists: ${{ steps.get-pr.outputs.pr_exists }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: 檢查是否已存在 PR
        id: get-pr
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${context.ref.replace('refs/heads/', '')}`,
              base: 'develop',
              state: 'open'
            });

            if (pulls.length > 0) {
              // PR 已存在
              console.log(`✅ 找到現有 PR: #${pulls[0].number}`);
              core.setOutput('pr_number', pulls[0].number);
              core.setOutput('pr_exists', 'true');
            } else {
              // 需要創建新 PR
              console.log('📝 需要創建新的 PR');
              core.setOutput('pr_exists', 'false');
            }

      - name: 創建新的 Pull Request
        id: create-pr
        if: steps.get-pr.outputs.pr_exists == 'false'
        uses: repo-sync/pull-request@v2
        with:
          source_branch: ${{ github.ref_name }}
          destination_branch: develop
          pr_title: '🚀 ${{ github.ref_name }} → develop'
          pr_body: |
            ## 功能分支 Pull Request

            **來源分支：** `${{ github.ref_name }}`  
            **目標分支：** `develop`  
            **建立時間：** ${{ github.event.head_commit.timestamp }}

            ### 變更內容
            - ${{ github.event.head_commit.message }}

            ### 檢查項目
            - [ ] Lint 檢查
            - [ ] 測試通過
            - [ ] 程式碼審查完成

            ---
            🤖 此 PR 通過所有檢查後將自動合併到 develop 分支
          pr_label: 'feature'
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: 設置新創建的 PR 編號
        if: steps.get-pr.outputs.pr_exists == 'false' && steps.create-pr.outputs.pr_number
        run: echo "pr_number=${{ steps.create-pr.outputs.pr_number }}" >> $GITHUB_OUTPUT

      - name: 顯示 PR 資訊 (除錯用)
        run: |
          echo "🔍 PR 資訊："
          echo "  - PR 是否已存在: ${{ steps.get-pr.outputs.pr_exists }}"
          echo "  - PR 編號: ${{ steps.get-pr.outputs.pr_number }}"
          echo "  - 分支名稱: ${{ github.ref_name }}"

  ci-checks:
    name: CI 檢查 (Lint & Test)
    runs-on: ubuntu-latest
    needs: setup-pr
    # 🔧 修改條件：只要有 PR 就執行（不管是新建還是現有的）

    # 🔧 新增 PostgreSQL 服務
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Lint
        run: |
          echo "🔍 執行 Lint 檢查..."
          npm run lint
          echo "✅ Lint 檢查通過"

      # 🔧 修改測試步驟，使用您應用程式實際的環境變數
      - name: 顯示環境資訊 (除錯用)
        run: |
          echo "🔍 環境資訊："
          echo "  - Node.js 版本: $(node --version)"
          echo "  - NPM 版本: $(npm --version)"
          echo "  - NODE_ENV: $NODE_ENV"
          echo "  - DB_HOST: $DB_HOST"
          echo "  - DB_USERNAME: $DB_USERNAME"
          echo "  - DB_DATABASE: $DB_DATABASE"
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USERNAME: test_user
          DB_PASSWORD: test_password
          DB_DATABASE: test_db
          DB_SYNCHRONIZE: true
          DB_ENABLE_SSL: false

      - name: Run Tests
        run: |
          echo "🧪 執行測試..."
          npm test
          echo "✅ 測試通過"
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USERNAME: test_user
          DB_PASSWORD: test_password
          DB_DATABASE: test_db
          DB_SYNCHRONIZE: true
          DB_ENABLE_SSL: false
          JWT_SECRET: ${{ secrets.JWT_SECRET || 'test_jwt_secret_for_ci' }}
          PORT: 3001

      - name: Run Build Test
        run: |
          echo "🏗️ 執行建置測試..."
          npm run build
          echo "✅ 建置成功"
        env:
          NODE_ENV: production
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USERNAME: test_user
          DB_PASSWORD: test_password
          DB_DATABASE: test_db
          DB_SYNCHRONIZE: false
          DB_ENABLE_SSL: false
          JWT_SECRET: ${{ secrets.JWT_SECRET || 'test_jwt_secret_for_ci' }}

      - name: Comment PR Success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ needs.setup-pr.outputs.pr-number }};
            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ✅ CI 檢查通過
              
              所有檢查項目都已通過：
              - ✅ Lint 檢查
              - ✅ 測試執行 (包含資料庫測試)
              - ✅ 建置測試
              
              🎉 準備自動合併到 develop 分支！
              
              ---
              🤖 由 GitHub Actions 自動檢查`
            });

      - name: Comment PR Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ needs.setup-pr.outputs.pr-number }};
            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ❌ CI 檢查失敗
              
              請檢查並修復以下問題：
              - 🔍 檢查 Lint 錯誤
              - 🧪 確認測試是否通過 (包含資料庫連接)
              - 🏗️ 驗證建置是否成功
              
              修復後推送新的 commit 將重新觸發檢查。
              
              **常見問題排除：**
              - 資料庫連接錯誤：檢查測試中的資料庫查詢語法
              - 環境變數問題：確認 .env.test 配置正確
              
              ---
              🤖 由 GitHub Actions 自動檢查`
            });

  auto-merge:
    name: 自動合併到 develop
    runs-on: ubuntu-latest
    needs: [setup-pr, ci-checks]
    if: needs.ci-checks.result == 'success'

    steps:
      - name: Auto merge PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN }} # 使用 PAT 代替 GITHUB_TOKEN
          script: |
            const prNumber = ${{ needs.setup-pr.outputs.pr-number }};
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            if (pr.mergeable && pr.state === 'open') {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                commit_title: `Auto merge: ${pr.title}`,
                commit_message: `自動合併 ${pr.head.ref} 到 develop\n\n✅ 通過所有 CI 檢查後自動合併\n- Lint 檢查通過\n- 測試執行成功\n- 建置測試完成`,
                merge_method: 'squash'
              });
              
              console.log('✅ 成功自動合併到 develop 分支');
            }

      - name: Trigger develop-to-main workflow
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'develop-to-main.yml',
              ref: 'develop'
            });
            console.log('✅ 已觸發 develop-to-main 工作流程');
